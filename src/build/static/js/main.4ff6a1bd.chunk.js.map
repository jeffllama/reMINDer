{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/article-content.js","components/ArticlesList.js","pages/ArticlesListPage.js","pages/NotFoundPage.js","components/CommentsList.js","components/UpvotesSection.js","components/AddCommentForm.js","components/DateSection.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","articles","name","title","content","ArticlesList","map","article","key","className","to","substring","ArticlesListPage","articleContent","NotFoundPage","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","DateSection","date","ArticlePage","match","params","find","articleInfo","useEffect","console","log","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ff6a1bd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Landing page\r\nconst HomePage = () => (\r\n    // <React.Fragment> short hand <> </>\r\n    <>\r\n            <h1> Hello, welcome to reMINDer!</h1>\r\n            <p> Hola familia, bienvenidos a Lily's historias! </p>\r\n            <p> reMINDer is a project to help people who may have trouble with their memory. \r\n            </p>\r\n            <br/> The journal articles section contains stories from my mom and hopefully you can enjoy those!\r\n            <p>\r\n                I plan to add a note keeping section, where a user can keep track of daily events/reminders and hopefully some helpful memory games\r\n            </p>\r\n    </>\r\n)\r\n\r\n// Exporting the homePage component so it can be used by app.js\r\nexport default HomePage;","import React from 'react';\r\n\r\n// Landing page\r\nconst AboutPage = () => (\r\n    // <React.Fragment> short hand <> </>\r\n    <>\r\n            <h1> About me</h1>\r\n    <p>My name is Jeffry Lam Tang, I am a BCIT Computer Systems Technology student.\r\n    The article section serves as an outlet for my mom to recollect and share her memories/experiences with family and anybody else! I will try to keep adding useful components. \r\n    </p>\r\n    </>\r\n)\r\n\r\n// Exporting the homePage component so it can be used by app.js\r\nexport default AboutPage;","// Sample content, contains java script objects which present the articles\r\n// content is an array of strings, each representing a paragraph\r\nconst articles = [\r\n    {\r\n        name: 'moving-to-canada',\r\n        title: 'Moving to Canada',\r\n        content: [\r\n            `We moved to Canada from Peru because at the time it was a better option for the family, for education, safer, and better living. I also had my brother Jose living in Canada\r\n            with his family. On Mar 24th, 2004 we made the move to Canada from Lima, Peru and flew through Jorge Chavez Internacional Aeropuerto.`,\r\n            `When I first came to Canada, the fresh air was great. There were also a lot of Chinese people, so it was helpful in assimilating and learning.The food was super fresh, healthy,\r\n            but the food is nowhere close to as good as Peru. I missed the pollo a la brasa, anticucho, ceviche, chicharron, comida chifa,\r\n            mariscos, and inka kola! I also missed Peru's colorful clothing, with alpaca. The weather in Vancouver was raining a lot, and in Peru it was always hot and never raining. `,\r\n            `Last thoughts: Super happy we came to Canada!`,\r\n        ]\r\n    }, {\r\n        name: 'childhood-in-china',\r\n        title: 'Growing Up in China',\r\n        content: [\r\n            `I was born in August 3rd, 1968 in Zhanjiang, Guangdong Province, China in a small village. The house was very small but had everything because my dad\r\n            came back from Peru so, took Peru's building construction to China. He made our house three levels but added everything, \r\n            even washroom with showers, kitchen, showers, dining room and other rooms.`,\r\n            `My dad originally had the last name Mak but he was adopted and got the last name Tang, both my parents came from Guangdong province. \r\n            We spoke cantonese at home, and I had 3 brothers from oldest to youngest, Sam, Jose, Carlos. Of course, there are their Spanish names, which they got after moving to Peru(have to talk about this another story) We all went to a small school, and I was studying in primary school until grade 4.`,\r\n            `At the time, my grandpa was in Peru for a while, and was running a grocery store. Then in 1983, we all moved to Peru`,\r\n        ]\r\n    }, {\r\n        name: 'youth-in-peru',\r\n        title: 'Teenage Years in Peru',\r\n        content: [\r\n            `We moved to Peru when I was a teenager. Peru had a lot of opportunities, for our family to make a living and eat better. \r\n            I didn't know anything about Peru before we moved there.`,  \r\n            `I went to a special school to learn Spanish for 2-3 years. After, I went to a high school called\r\n            Collegio Juan XXIII with my little brother Carlos. I really liked the school, it was beautiful and had everything. I got to make a lot of new friends\r\n            like Susie, and Alejandro. My favorite course was pottery and art`,\r\n            `At the moment, our family was running a grocery store and Chifa restaurant, and after school, I would always go work in the store or Chifa, wherever they needed me , never had time for homework`,\r\n        ]\r\n    },\r\n    {\r\n        name: 'marriage-story',\r\n        title: 'Meeting My Husband',\r\n        content: [\r\n            `I got introduced to my husband Julio because my uncle (Luis' grandpa) brought him to our house. My first impression was that \r\n            he was very very handsome (of course, or else we wouldn't be married), shy, didn't talk too much, would get embarassed about his smoking. He would always come to the chifa, invite me\r\n            take me to go out to places like Miraflores, to see the view and stores, and always treated me to eat good food. `,\r\n            `After 4 months of a lot of dating, eating good food we got married. Before we got married, we went to China and celebrated with the rest of our family.,\r\n            We got married in 1995, in Lima, in a municipalidad, we had a huge banquet and invited all our friends`,\r\n        ]\r\n    }, {\r\n        name: 'first-child',\r\n        title: 'Having Our First Child',\r\n        content: [\r\n            `After we got married, we were ready for kids. And before we knew it, I had a huge belly. At the time, the baby in the womb was very low in the womb\r\n            so everyone thought it would be a boy. I was a very busy, always working in the store while i was pregnant. On November 2, 1996, \r\n            I was having a lot of pain and went to the hospital. Then gave birth at night, to Jeffry, my brother Carlos helped give his Spanish name, and my husband gave his chinese name His head was so big when I was giving birth to him that he wouldn't come out,\r\n            so doctor had to use a special machine like a suction cup and pulled him out. He had a lot of hair, medium size baby, normal and healthy.`,\r\n        ]\r\n    },\r\n];\r\n\r\n//export sample data\r\nexport default articles;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// instead of import article content array, we will get it from components props {articles}\r\n//This allows us to use same component to display different lists of articles\r\nconst ArticlesList =({articles}) => (\r\n    <>\r\n        {/* For each article */}\r\n        {articles.map((article, key) => (\r\n            // List the article title, and using link component, link each article to the article page\r\n            <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\r\n                <h3>{article.title}</h3>\r\n                {/* Showing first 150 characters for users to see what article is about */}\r\n                <p>{article.content[0].substring(0, 150)}...</p>\r\n            </Link>\r\n        ))}\r\n        </>\r\n);\r\n\r\nexport default ArticlesList;","import React from 'react';\r\nimport articleContent from './article-content';\r\nimport ArticlesList from '../components/ArticlesList';\r\n\r\nconst ArticlesListPage = () => (\r\n    <>\r\n    <h1>Articles</h1>\r\n    {/* Passing articlesList the articles prop to be used */}\r\n    <ArticlesList articles={articleContent}/>\r\n    </>\r\n);\r\n\r\nexport default ArticlesListPage;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found, Turn Around! </h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\n\r\n// Comments list will take one prop (comments we want to display)\r\nconst CommentsList = ({comments}) => (\r\n    //Have to wrap with react fragments, since returning more than one element\r\n    <>\r\n    <h3>Comments: </h3>\r\n    {/*  map runs through all items in the array\r\n    for each comment, we have a div, rmb have to add key, and prop to outermost element */}\r\n    {comments.map((comment, key) => (\r\n        // css for react component use classname\r\n        <div className =\"comment\" key = {key}>\r\n            <h4>{comment.username}</h4>\r\n            <p>{comment.text}</p>\r\n        </div>\r\n    ))}\r\n    </>\r\n)\r\nexport default CommentsList;","import React from 'react';\r\n\r\nconst UpvotesSection = ({articleName, upvotes, setArticleInfo}) => {\r\n    // This function, will create a post request using fetch\r\n    // Await(async), want to write path for upvote articles endpoint\r\n    // Since we want this to be a post request, have to pass options object to fetch\r\n    const upvoteArticle = async () => {\r\n        //  Updates data in db, and sends back updated data as response\r\n        const result = await fetch(`/api/articles/${articleName}/upvote`,{\r\n            method: 'post',\r\n        });\r\n        // get body of the response\r\n        const body = await result.json();\r\n        // update article info state\r\n        setArticleInfo(body);\r\n    }\r\n    return (\r\n    <div id=\"upvotes-section\">\r\n    <h4>This post has been upvoted {upvotes} times</h4>\r\n    <button onClick = {() => upvoteArticle()}> Upvote this !</button>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default UpvotesSection;","// Using useState react hook\r\nimport React, {useState}from 'react';\r\n\r\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\r\n    // Setting up usestate React hooks,\r\n    // userName holds username property from input name\r\n    // setUsername a function to change value of username state\r\n    const [username,setUsername] = useState('');\r\n    const [commentText, setCommentText] = useState('');\r\n    // To link these states to textfields they represent, just add value props to both text fields\r\n\r\n    // async function that user triggers by clicking that sends request to sevrer\r\n    const addComment = async () => {\r\n        // Result contains updated version of article info\r\n        const result = await fetch(`/api/articles/${articleName}/add-comment`,{\r\n            method: 'post',\r\n            // not only we posting, but sending extra data with post\r\n            // passing username state, and b/c server is expecting text(instead of commentText)\r\n            // turns JSON object into string server can parse\r\n            body: JSON.stringify({username, text: commentText}),\r\n            // when sending post requests with JSON body to server, need to include a header\r\n            // header tells server what kind of data we're sending, allowing to parse body correctly\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const body = await result.json();\r\n        setArticleInfo(body);\r\n        setUsername('');\r\n        setCommentText('');\r\n    }\r\n\r\n    return (\r\n    <div id=\"add-comment-form\">\r\n        <h3>Add a comment!</h3>\r\n        <label>Name:\r\n            {/*Value prop, onChange prop(when value of text field changes, we want to update username state) */}\r\n            <input type=\"text\" value = {username} onChange={(event)=> setUsername(event.target.value)}/>\r\n        </label>\r\n        {/* Input for user's name' */}\r\n        <label>Comment:\r\n                    {/*text area for writing comment */}\r\n            <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/> \r\n        </label>\r\n        {/* Give form interna lstate, to keep track of text field values */}\r\n        <button onClick={()=> addComment()}>Add Comment</button>\r\n    </div>\r\n    );\r\n    \r\n}\r\nexport default AddCommentForm;","import React from 'react';\r\n\r\nconst DateSection = ({ date}) => {\r\n    return (\r\n    <div id=\"dates-section\">\r\n    <h5>Posted: {date} </h5>\r\n    </div>\r\n    );\r\n}\r\nexport default DateSection;","import React,{useState,useEffect} from 'react';\r\nimport articleContent from './article-content';\r\nimport NotFoundPage from './NotFoundPage';\r\nimport ArticlesList from '../components/ArticlesList';\r\nimport CommentsList from '../components/CommentsList';\r\nimport UpvotesSection from '../components/UpvotesSection';\r\nimport AddCommentForm from '../components/AddCommentForm';\r\nimport DateSection from '../components/DateSection';\r\n\r\n// Article Page, should show specific artcles\r\n// Need to use URL parameters\r\n// React router passes match prop (match prop contains current url and if it matches route path, and property params(name parameter))\r\nconst ArticlePage = ({ match }) => {\r\n    // fetch asynchronous fnuction to call from front end, \r\n    // first arg url which endpoint to hit, second arg is options object to specify details of request we want to send\r\n    // default for method is GET, can specify body: and headers\r\n    // fetch('/api/articles/...',{\r\n    //     method: 'POST',\r\n    //     body:\r\n    // })\r\n    // pulling url parameter name out of match\r\n    const name = match.params.name;\r\n    // article page component has access to whatever name we put in url, now need to find article from articles array that has that name\r\n    // find article whose name is equal to the name property we get from url parameters\r\n    const article = articleContent.find(article => article.name === name);\r\n    // defining article info, to be populated by request to server, and set article info, which is function to change article info\r\n    // What we pass to useState is initial value of article info before we load any data or change state\r\n    const [articleInfo, setArticleInfo] = useState ({upvotes: 0, comments: [], date: \"\"});\r\n    //Use effect hook runs when component first mounts and component updates( article info changes)\r\n    // second param array, is array of values useffect should watch, if one changes, use effect should be called again\r\n    // [] empty array, indicates only when component loads, [name] changes whenever url name changes\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            // Result fetches and will contain result of the response\r\n            // Put proxy in pacakage.json, so can acess the localhost:8000\r\n            const result = await fetch(`/api/articles/${name}`)\r\n            const body = await result.json();\r\n            console.log(body);\r\n            // Sets article info state to what we received from fetch\r\n            setArticleInfo(body);\r\n        }\r\n        fetchData();\r\n    }, [name]);\r\n    if (!article) return <NotFoundPage/>\r\n\r\n    //otherArticles content will filter so we only get articles whose name isn't equal to what we have above\r\n    const otherArticles = articleContent.filter(article => article.name !== name);\r\n    \r\n    return (\r\n        <>\r\n            {/* i.e. if we typed in local host, /article/<any name> i.e. /learn-react, heading will correct show string we wrote (learn-react) \r\n    our article page component now has access to url parameter and can change itself accordingly*/}\r\n            {/* <h1> This is the {name} article </h1> */}\r\n\r\n            {/*Finally convert article info into JSX heading just displays article title property */}\r\n            <h1>{article.title}</h1>\r\n            <DateSection date={articleInfo.date}/>\r\n            {/* Map articles content property to a bunch of JSX elements */}\r\n            {article.content.map((paragraph, key )=> (\r\n                <p key ={key}>{paragraph}</p>\r\n            ))}\r\n            <UpvotesSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo}/>\r\n            {/* As the comments prop, we pass in articleinfo(state).comments */}\r\n            <CommentsList comments={articleInfo.comments}/>\r\n            <AddCommentForm articleName={name} setArticleInfo={setArticleInfo}/>\r\n            <h3>Other Articles:</h3>\r\n            {/* Want to use this articleslist to show related articles except the one we're on\r\n            Maybe change this part , so it filters by nearest date */}\r\n            <ArticlesList articles={otherArticles}></ArticlesList>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ArticlePage;","import React from 'react';\r\n// React router user another component to link\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                {/* Link syntax, to (prop) what url to link to when we click */}\r\n                <Link to =\"/\">reMINDer</Link>          \r\n            </li>\r\n            <li>\r\n            <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/articles-list\">Articles</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)\r\n\r\nexport default NavBar;","import React from 'react';\n// Importing components for React Router\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport './App.css';\n//Importing home page component to be used\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NavBar from './NavBar';\nimport NotFoundPage from './pages/NotFoundPage';\n\n\n\nfunction App() {\n  return (\n    // Wrapping entire app with router component, since router ensures entire rendered app is up to date with current URL\n    <Router>\n      <div className=\"App\">\n        <NavBar/>\n        {/*  Route component takes in two main props:\n       1. a path prop to specify what url we want to render a given component at\n       2. a component prop which specifies the actual component we want to render there\n       HomePage renders when url is just a slash, /, need to write exact once to tell react router to match exactly */}\n        <div id=\"page-body\">\n          {/* To prevent unintended route matching, switch makes sure only one route wrapped in it, is rendered at a time\n           only renders the first route that matches the url, none of the others, have to put error last b/c always matches*/}\n          <Switch>\n            <Route path=\"/\" component={HomePage} exact />\n            <Route path=\"/about\" component={AboutPage} />\n            <Route path=\"/articles-list\" component={ArticlesListPage} />\n            {/* React router need to use URL parameter for specific article pages to show\n            ,syntax when defining path use :<variable name>\n            when react router sees URL parameter, passes prop to component at that route(articlepage) that tells component the value\n            of the section of our url, or string that occupies the :name spot, i.e. article/learn-react */}\n            <Route path=\"/article/:name\" component={ArticlePage} />\n            {/* By not adding path, always matches by default */}\n            <Route component={NotFoundPage}/>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}