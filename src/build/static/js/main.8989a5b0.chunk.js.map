{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/article-content.js","components/ArticlesList.js","pages/ArticlesListPage.js","pages/NotFoundPage.js","components/CommentsList.js","components/UpvotesSection.js","components/AddCommentForm.js","components/DateSection.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","articles","name","title","date","content","ArticlesList","map","article","key","className","to","substring","ArticlesListPage","articleContent","NotFoundPage","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","DateSection","ArticlePage","match","params","find","articleInfo","useEffect","console","log","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8989a5b0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Landing page\r\nconst HomePage = () => (\r\n    // <React.Fragment> short hand <> </>\r\n    <>\r\n            <h1> Hello, welcome to reMINDer!</h1>\r\n            <p>reMINDer is a project to help people who may have trouble with their memory. Currently includes an articles section, where a user's stories(articles) can be up voted and commented on.\r\n            </p>\r\n            <br/>Currently, this website will only be used by my mom to give us some great updates on her days!\r\n            <p>\r\n                <br/>Plan to include add a notes section, where a user can keep track of daily events/reminders and hopefully some helpful memory games\r\n            </p>\r\n    </>\r\n)\r\n\r\n// Exporting the homePage component so it can be used by app.js\r\nexport default HomePage;","import React from 'react';\r\n\r\n// Landing page\r\nconst AboutPage = () => (\r\n    // <React.Fragment> short hand <> </>\r\n    <>\r\n            <h1> About me</h1>\r\n    <p>My name is Jeffry Lam Tang, I am a Computer Systems Technology student. This project has become a passion project intended to help those who may experience memory problems. This is an issue important to me, and I will try to keep adding useful components. \r\n    </p>\r\n    </>\r\n)\r\n\r\n// Exporting the homePage component so it can be used by app.js\r\nexport default AboutPage;","// Sample content, contains java script objects which present the articles\r\n// content is an array of strings, each representing a paragraph\r\nconst articles = [\r\n    {\r\n        name: 'learn-react',\r\n        title: 'The Fastest Way to Learn React',\r\n        date: 'March 3, 2020',\r\n        content: [\r\n            `Welcome! Today we're going to be talking about the fastest way to\r\n            learn React. We'll be discussing some topics such as proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n        ]\r\n    },    {\r\n        name: 'learn-node',\r\n        title: 'How to Build a Node Server in 10 Minutes',\r\n        date: 'March 3, 2020',\r\n        content: [\r\n            `In this article, we're going to be talking looking at a very quick way\r\n            to set up a Node.js server. We'll be discussing some topics such as proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n        ]\r\n    },     {\r\n        name: 'my-thoughts-on-resumes',\r\n        title: 'My Thoughts on Resumes',\r\n        date: 'March 3, 2020',\r\n        content: [\r\n            `Today is the day I talk about something which scares most people: resumes.\r\n            In reality, I'm not sure why people have such a hard time with proin congue\r\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \r\n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \r\n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \r\n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \r\n            sodales purus euismod.`,\r\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \r\n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \r\n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \r\n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \r\n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \r\n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\r\n        ]\r\n    }, {\r\n        name: 'moving-to-canada',\r\n        title: 'Moving to Canada',\r\n        date: 'March 3, 2020',\r\n        content: [\r\n            'Our family immigrated to Canada from Peru, in May 2004. Before moving to Canada, we took a vacation to Los Angeles and Miami',\r\n        ]\r\n    }, {\r\n        name: 'date-tester',\r\n        title: 'Testing the date',\r\n        date: 'March 3, 2020',\r\n        content: [\r\n            'Our family immigrated to Canada from Peru, in May 2004. Before moving to Canada, we took a vacation to Los Angeles and Miami',\r\n        ]\r\n    }, \r\n];\r\n\r\n//export sample data\r\nexport default articles;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// instead of import article content array, we will get it from components props {articles}\r\n//This allows us to use same component to display different lists of articles\r\nconst ArticlesList =({articles}) => (\r\n    <>\r\n        {/* For each article */}\r\n        {articles.map((article, key) => (\r\n            // List the article title, and using link component, link each article to the article page\r\n            <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\r\n                <h3>{article.title}</h3>\r\n                {/* Showing first 150 characters for users to see what article is about */}\r\n                <p>{article.content[0].substring(0, 150)}...</p>\r\n            </Link>\r\n        ))}\r\n        </>\r\n);\r\n\r\nexport default ArticlesList;","import React from 'react';\r\nimport articleContent from './article-content';\r\nimport ArticlesList from '../components/ArticlesList';\r\n\r\nconst ArticlesListPage = () => (\r\n    <>\r\n    <h1>Articles</h1>\r\n    {/* Passing articlesList the articles prop to be used */}\r\n    <ArticlesList articles={articleContent}/>\r\n    </>\r\n);\r\n\r\nexport default ArticlesListPage;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found, Turn Around! </h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\n\r\n// Comments list will take one prop (comments we want to display)\r\nconst CommentsList = ({comments}) => (\r\n    //Have to wrap with react fragments, since returning more than one element\r\n    <>\r\n    <h3>Comments: </h3>\r\n    {/*  map runs through all items in the array\r\n    for each comment, we have a div, rmb have to add key, and prop to outermost element */}\r\n    {comments.map((comment, key) => (\r\n        // css for react component use classname\r\n        <div className =\"comment\" key = {key}>\r\n            <h4>{comment.username}</h4>\r\n            <p>{comment.text}</p>\r\n        </div>\r\n    ))}\r\n    </>\r\n)\r\nexport default CommentsList;","import React from 'react';\r\n\r\nconst UpvotesSection = ({articleName, upvotes, setArticleInfo}) => {\r\n    // This function, will create a post request using fetch\r\n    // Await(async), want to write path for upvote articles endpoint\r\n    // Since we want this to be a post request, have to pass options object to fetch\r\n    const upvoteArticle = async () => {\r\n        //  Updates data in db, and sends back updated data as response\r\n        const result = await fetch(`/api/articles/${articleName}/upvote`,{\r\n            method: 'post',\r\n        });\r\n        // get body of the response\r\n        const body = await result.json();\r\n        // update article info state\r\n        setArticleInfo(body);\r\n    }\r\n    return (\r\n    <div id=\"upvotes-section\">\r\n    <h4>This post has been upvoted {upvotes} times</h4>\r\n    <button onClick = {() => upvoteArticle()}> Upvote this !</button>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default UpvotesSection;","// Using useState react hook\r\nimport React, {useState}from 'react';\r\n\r\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\r\n    // Setting up usestate React hooks,\r\n    // userName holds username property from input name\r\n    // setUsername a function to change value of username state\r\n    const [username,setUsername] = useState('');\r\n    const [commentText, setCommentText] = useState('');\r\n    // To link these states to textfields they represent, just add value props to both text fields\r\n\r\n    // async function that user triggers by clicking that sends request to sevrer\r\n    const addComment = async () => {\r\n        // Result contains updated version of article info\r\n        const result = await fetch(`/api/articles/${articleName}/add-comment`,{\r\n            method: 'post',\r\n            // not only we posting, but sending extra data with post\r\n            // passing username state, and b/c server is expecting text(instead of commentText)\r\n            // turns JSON object into string server can parse\r\n            body: JSON.stringify({username, text: commentText}),\r\n            // when sending post requests with JSON body to server, need to include a header\r\n            // header tells server what kind of data we're sending, allowing to parse body correctly\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const body = await result.json();\r\n        setArticleInfo(body);\r\n        setUsername('');\r\n        setCommentText('');\r\n    }\r\n\r\n    return (\r\n    <div id=\"add-comment-form\">\r\n        <h3>Add a comment!</h3>\r\n        <label>Name:\r\n            {/*Value prop, onChange prop(when value of text field changes, we want to update username state) */}\r\n            <input type=\"text\" value = {username} onChange={(event)=> setUsername(event.target.value)}/>\r\n        </label>\r\n        {/* Input for user's name' */}\r\n        <label>Comment:\r\n                    {/*text area for writing comment */}\r\n            <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/> \r\n        </label>\r\n        {/* Give form interna lstate, to keep track of text field values */}\r\n        <button onClick={()=> addComment()}>Add Comment</button>\r\n    </div>\r\n    );\r\n    \r\n}\r\nexport default AddCommentForm;","import React from 'react';\r\n\r\nconst DateSection = ({ date}) => {\r\n    return (\r\n    <div id=\"dates-section\">\r\n    <h5>Posted: {date} </h5>\r\n    </div>\r\n    );\r\n}\r\nexport default DateSection;","import React,{useState,useEffect} from 'react';\r\nimport articleContent from './article-content';\r\nimport NotFoundPage from './NotFoundPage';\r\nimport ArticlesList from '../components/ArticlesList';\r\nimport CommentsList from '../components/CommentsList';\r\nimport UpvotesSection from '../components/UpvotesSection';\r\nimport AddCommentForm from '../components/AddCommentForm';\r\nimport DateSection from '../components/DateSection';\r\n\r\n// Article Page, should show specific artcles\r\n// Need to use URL parameters\r\n// React router passes match prop (match prop contains current url and if it matches route path, and property params(name parameter))\r\nconst ArticlePage = ({ match }) => {\r\n    // fetch asynchronous fnuction to call from front end, \r\n    // first arg url which endpoint to hit, second arg is options object to specify details of request we want to send\r\n    // default for method is GET, can specify body: and headers\r\n    // fetch('/api/articles/...',{\r\n    //     method: 'POST',\r\n    //     body:\r\n    // })\r\n    // pulling url parameter name out of match\r\n    const name = match.params.name;\r\n    // article page component has access to whatever name we put in url, now need to find article from articles array that has that name\r\n    // find article whose name is equal to the name property we get from url parameters\r\n    const article = articleContent.find(article => article.name === name);\r\n    // defining article info, to be populated by request to server, and set article info, which is function to change article info\r\n    // What we pass to useState is initial value of article info before we load any data or change state\r\n    const [articleInfo, setArticleInfo] = useState ({upvotes: 0, comments: [], date: \"\"});\r\n    //Use effect hook runs when component first mounts and component updates( article info changes)\r\n    // second param array, is array of values useffect should watch, if one changes, use effect should be called again\r\n    // [] empty array, indicates only when component loads, [name] changes whenever url name changes\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            // Result fetches and will contain result of the response\r\n            // Put proxy in pacakage.json, so can acess the localhost:8000\r\n            const result = await fetch(`/api/articles/${name}`)\r\n            const body = await result.json();\r\n            console.log(body);\r\n            // Sets article info state to what we received from fetch\r\n            setArticleInfo(body);\r\n        }\r\n        fetchData();\r\n    }, [name]);\r\n    if (!article) return <NotFoundPage/>\r\n\r\n    //otherArticles content will filter so we only get articles whose name isn't equal to what we have above\r\n    const otherArticles = articleContent.filter(article => article.name !== name);\r\n    \r\n    return (\r\n        <>\r\n            {/* i.e. if we typed in local host, /article/<any name> i.e. /learn-react, heading will correct show string we wrote (learn-react) \r\n    our article page component now has access to url parameter and can change itself accordingly*/}\r\n            {/* <h1> This is the {name} article </h1> */}\r\n\r\n            {/*Finally convert article info into JSX heading just displays article title property */}\r\n            <h1>{article.title}</h1>\r\n            <DateSection date={articleInfo.date}/>\r\n            {/* Map articles content property to a bunch of JSX elements */}\r\n            {article.content.map((paragraph, key )=> (\r\n                <p key ={key}>{paragraph}</p>\r\n            ))}\r\n            <UpvotesSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo}/>\r\n            {/* As the comments prop, we pass in articleinfo(state).comments */}\r\n            <CommentsList comments={articleInfo.comments}/>\r\n            <AddCommentForm articleName={name} setArticleInfo={setArticleInfo}/>\r\n            <h3>Other Articles:</h3>\r\n            {/* Want to use this articleslist to show related articles except the one we're on\r\n            Maybe change this part , so it filters by nearest date */}\r\n            <ArticlesList articles={otherArticles}></ArticlesList>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ArticlePage;","import React from 'react';\r\n// React router user another component to link\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                {/* Link syntax, to (prop) what url to link to when we click */}\r\n                <Link to =\"/\">reMINDer</Link>          \r\n            </li>\r\n            <li>\r\n            <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/articles-list\">Articles</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)\r\n\r\nexport default NavBar;","import React from 'react';\n// Importing components for React Router\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport './App.css';\n//Importing home page component to be used\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NavBar from './NavBar';\nimport NotFoundPage from './pages/NotFoundPage';\n\n\n\nfunction App() {\n  return (\n    // Wrapping entire app with router component, since router ensures entire rendered app is up to date with current URL\n    <Router>\n      <div className=\"App\">\n        <NavBar/>\n        {/*  Route component takes in two main props:\n       1. a path prop to specify what url we want to render a given component at\n       2. a component prop which specifies the actual component we want to render there\n       HomePage renders when url is just a slash, /, need to write exact once to tell react router to match exactly */}\n        <div id=\"page-body\">\n          {/* To prevent unintended route matching, switch makes sure only one route wrapped in it, is rendered at a time\n           only renders the first route that matches the url, none of the others, have to put error last b/c always matches*/}\n          <Switch>\n            <Route path=\"/\" component={HomePage} exact />\n            <Route path=\"/about\" component={AboutPage} />\n            <Route path=\"/articles-list\" component={ArticlesListPage} />\n            {/* React router need to use URL parameter for specific article pages to show\n            ,syntax when defining path use :<variable name>\n            when react router sees URL parameter, passes prop to component at that route(articlepage) that tells component the value\n            of the section of our url, or string that occupies the :name spot, i.e. article/learn-react */}\n            <Route path=\"/article/:name\" component={ArticlePage} />\n            {/* By not adding path, always matches by default */}\n            <Route component={NotFoundPage}/>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}